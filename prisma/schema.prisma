generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Adherent {
  id_adherent               Int              @id @default(autoincrement())
  nom                       String           @db.VarChar(100)
  prenom                    String           @db.VarChar(100)
  email                     String           @unique @db.VarChar(150)
  password                  String           @db.VarChar(255)
  age                       Int
  gender                    String           @db.VarChar(10)
  goal                      String?          @db.VarChar(255)
  nombre_sceance_restantes  Int              @default(0)
  nombre_heures_restantes   Int              @default(0)
  role                      String?          @default("Athlete")
  next_adherent_inbody_rdv  DateTime?        @db.Timestamp(6)
  payment_status            String?
  inscription_status        String?          @default("false")
  Adherent_sport            Adherent_sport[]
  Diet                      Diet[]
  InBody                    InBody[]
}

model Adherent_sport {
  id_sport     BigInt
  id           Int       @id @default(autoincrement())
  id_adherent  Int
  Adherent     Adherent  @relation(fields: [id_adherent], references: [id_adherent], onDelete: Cascade)
  Sport        Sport     @relation(fields: [id_sport], references: [id_sport], onDelete: Cascade)
}

model Sport {
  id_sport        BigInt            @id @default(autoincrement())
  Name            String
  Adherent_sport  Adherent_sport[]
  Coach           Coach[]
  Sport_coach     Sport_coach[]
  sessions        SportSession[]    @relation("SportToSessions")
}

model SportSession {
  id             Int       @id @default(autoincrement())
  sport_id       BigInt
  date           DateTime? @db.Date
  starting_time  DateTime? @db.Time(6)
  ending_time    DateTime? @db.Time(6)
  group_name     String?

  Sport          Sport     @relation("SportToSessions", fields: [sport_id], references: [id_sport], onDelete: Cascade)
}

model Diet {
  id           BigInt    @id @default(autoincrement())
  id_adherent  Int
  id_food      Int?
  meal_type    String?   @db.VarChar
  Date         DateTime? @db.Date
  Adherent     Adherent  @relation(fields: [id_adherent], references: [id_adherent], onDelete: Cascade)
  food         food?     @relation(fields: [id_food], references: [id_food], onDelete: Cascade)
}

model food {
  id_food   Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  calories  Int
  fat       Decimal @db.Decimal(5, 2)
  carbs     Decimal @db.Decimal(5, 2)
  protein   Decimal @db.Decimal(5, 2)
  Diet      Diet[]
}

model InBody {
  id                BigInt    @id @default(autoincrement())
  id_adherent       Int
  poids             Float?    @db.Real
  masse_musculaire  Float?    @db.Real
  masse_grasse      Float?    @db.Real
  score             Int?
  date              DateTime? @db.Date
  time              DateTime? @db.Time(6)
  Adherent          Adherent  @relation(fields: [id_adherent], references: [id_adherent], onDelete: Cascade)
}

model Coach {
  id_coach     Int           @id @default(autoincrement())
  nom          String?       @db.VarChar
  prenom       String?       @db.VarChar
  email        String?       @db.VarChar
  age          Int?
  id_sport     BigInt?
  Sport        Sport?        @relation(fields: [id_sport], references: [id_sport], onDelete: Cascade)
  Sport_coach  Sport_coach[]
}

model Sport_coach {
  id_coaching  BigInt  @id @default(autoincrement())
  id_coach     Int
  id_sport     BigInt?
  Coach        Coach   @relation(fields: [id_coach], references: [id_coach], onDelete: Cascade)
  Sport        Sport?  @relation(fields: [id_sport], references: [id_sport], onDelete: Cascade)
}
